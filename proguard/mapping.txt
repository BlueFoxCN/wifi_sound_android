com.command_set.Authenticate -> com.jhr.a.a:
    void runCmd() -> a
com.command_set.Command -> com.jhr.a.b:
    byte[] cls -> a
    byte[] ins -> b
    byte[] p1 -> c
    byte[] p2 -> d
    byte[] lc -> e
    byte[] le -> f
    byte[] cmdContent -> k
    byte[] cmdParams -> g
    byte[] respondData -> h
    byte[] respondStatus -> i
    byte[] respond -> j
    android.nfc.tech.IsoDep isoDep -> l
    void constructCommand() -> b
    void runCmd() -> a
    byte[] decrypt(java.lang.String,java.lang.String,byte[],byte[]) -> a
    byte[] encrypt(java.lang.String,java.lang.String,byte[],byte[]) -> b
    byte[] sendModeTdesDecrypt(byte[],byte[]) -> a
    byte[] sendModeTdesEncrypt(byte[],byte[]) -> b
    byte[] sendModeDesDecrypt(byte[],byte[]) -> c
    byte[] sendModeDesEncrypt(byte[],byte[]) -> d
    byte[] normalModeDesDecrypt(byte[],byte[]) -> e
    byte[] normalModeTdesDecrypt(byte[],byte[]) -> f
    byte[] receiveModeDesDecrypt(byte[],byte[]) -> g
    byte[] receiveModeDesEncrypt(byte[],byte[]) -> h
    byte[] receiveModeTdesDecrypt(byte[],byte[]) -> i
    byte[] receiveModeTdesEncrypt(byte[],byte[]) -> j
    java.lang.String load(android.nfc.tech.NfcF,android.content.res.Resources) -> a
    java.lang.String parseBalance(float[],int,android.content.res.Resources) -> a
com.command_set.GetChallenge -> com.jhr.a.c:
    void runCmd() -> a
com.command_set.ManagementDeviceInit -> com.jhr.a.d:
    void runCmd() -> a
com.command_set.ReadData -> com.jhr.a.e:
    void runCmd() -> a
com.command_set.RemoveData -> com.jhr.a.f:
    void runCmd() -> a
com.command_set.Select -> com.jhr.a.g:
    void runCmd() -> a
com.command_set.WriteData -> com.jhr.a.h:
    void runCmd() -> a
com.jhr.encordio.AudioFileWriter -> com.jhr.b.a:
    byte[] buildOggPageHeader(int,long,int,int,int,byte[]) -> a
    void writeInt(byte[],int,int) -> a
    void writeString(byte[],int,java.lang.String) -> a
com.jhr.encordio.OggCrc -> com.jhr.b.b:
    int[] crc_lookup -> a
    int checksum(int,byte[],int,int) -> a
com.jhr.encordio.OggSpeexWriter -> com.jhr.b.c:
    java.io.OutputStream out -> a
    int sampleRate -> b
    int channels -> c
    int nframes -> d
    boolean vbr -> e
    int streamSerialNumber -> f
    byte[] dataBuffer -> g
    int dataBufferPtr -> h
    byte[] headerBuffer -> i
    int headerBufferPtr -> j
    int pageCount -> k
    int packetCount -> l
    long granulepos -> m
    void flush(boolean) -> a
com.jhr.encordio.SpeexPlayer -> com.jhr.b.d:
    java.lang.String fileName -> c
    com.bluefox.SpeexDecoder speexdec -> a
    byte[] totData -> d
    android.os.Handler playButtonHandler -> b
    java.lang.String load(android.nfc.tech.NfcV,android.content.res.Resources) -> a
    java.lang.String parseSzlibData$5b14f51a(int,byte[],android.content.res.Resources) -> a
com.jhr.encordio.SpeexPlayer$RecordPlayThread -> com.jhr.b.e:
    com.jhr.encordio.SpeexPlayer this$0 -> a
    void run() -> run
com.jhr.encordio.SpeexWriteClient -> com.jhr.b.f:
    int sampleRate -> a
    int channels -> b
    int nframes -> c
    boolean vbr -> d
    com.jhr.encordio.OggSpeexWriter speexWriter -> e
com.jhr.encordio.SpeexWriter -> com.jhr.b.g:
    java.lang.Object mutex -> b
    com.jhr.encordio.SpeexWriteClient client -> c
    boolean isRecording -> d
    com.jhr.encordio.SpeexWriter$processedData pData -> e
    java.util.List list -> f
    int write_packageSize -> a
    void run() -> run
    void putData(byte[],int) -> a
    void setRecording(boolean) -> a
    boolean isRecording() -> a
com.jhr.encordio.SpeexWriter$processedData -> com.jhr.b.h:
    int size -> a
    byte[] processed -> b
com.bluefox.GaussPlayActivity -> com.bluefox.GaussPlayActivity:
    int totSize -> a
    byte[] totData -> b
    android.nfc.tech.IsoDep iso -> c
    byte[] cardKey -> j
    byte[] rnd1 -> k
    byte[] rnd2 -> l
    byte[] sessionKey -> d
    int bytesNumOnce -> e
    boolean scanCard -> f
    int iCount -> m
    android.widget.TextView textShow -> g
    android.widget.Button playButton -> h
    android.widget.Button exitButton -> n
    android.widget.Button writeButton -> o
    android.widget.ProgressBar readProgressBar -> i
    android.nfc.NfcAdapter mAdapter -> p
    android.app.PendingIntent mPendingIntent -> q
    android.content.IntentFilter[] mFilters -> r
    java.lang.String[][] mTechLists -> s
    java.lang.String fileName -> t
    com.jhr.encordio.SpeexPlayer splayer -> u
    android.os.Handler mPlayButtonHandler -> v
    android.os.Handler mHandler2 -> w
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    void resolveIntent(android.content.Intent) -> a
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    int access$0(com.bluefox.GaussPlayActivity) -> a
    byte[] access$1$72ee56f3(int) -> a
    void access$2(com.bluefox.GaussPlayActivity,int) -> a
    android.os.Handler access$3(com.bluefox.GaussPlayActivity) -> b
com.bluefox.GaussPlayActivity$1 -> com.bluefox.a:
    com.bluefox.GaussPlayActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.bluefox.GaussPlayActivity$1ReadDataRunnable -> com.bluefox.b:
    com.bluefox.GaussPlayActivity this$0 -> a
    void run() -> run
com.bluefox.GaussPlayActivity$2 -> com.bluefox.c:
    com.bluefox.GaussPlayActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.bluefox.WifiSound -> com.bluefox.WifiSound:
    int totSize -> a
    int maxSize -> g
    android.nfc.tech.IsoDep iso -> b
    byte[] cardKey -> h
    byte[] rnd1 -> i
    byte[] rnd2 -> j
    byte[] sessionKey -> c
    int bytesNumOnceWrite -> d
    com.bluefox.SpeexRecorderRecorder recorderInstance -> k
    int iCount -> l
    android.widget.EditText text -> m
    android.widget.Button saveTextButton -> n
    android.widget.Button startButton -> o
    android.widget.Button stopButton -> p
    android.widget.Button exitButton -> q
    android.widget.ProgressBar writeProgressBar -> e
    android.nfc.NfcAdapter mAdapter -> r
    android.app.PendingIntent mPendingIntent -> s
    android.content.IntentFilter[] mFilters -> t
    java.lang.String[][] mTechLists -> u
    byte[] dataRecord -> f
    java.lang.String fileName -> v
    android.os.Handler mHandler1 -> w
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    void resolveIntent(android.content.Intent) -> a
    void writeData(byte[],int) -> a
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    int access$0(com.bluefox.WifiSound) -> a
    byte[] access$1$33f15057(int) -> a
    void access$2(com.bluefox.WifiSound,int) -> a
    android.os.Handler access$3(com.bluefox.WifiSound) -> b
com.bluefox.WifiSound$1 -> com.bluefox.d:
    com.bluefox.WifiSound this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.bluefox.WifiSound$1WriteDataRunnable -> com.bluefox.e:
    com.bluefox.WifiSound this$0 -> a
    void run() -> run
com.bluefox.Speex -> com.bluefox.Speex:
    void init() -> a
    int open(int) -> open
    int decode(byte[],short[],int) -> decode
    int encode(short[],int,byte[],int) -> encode
com.bluefox.SpeexDecoder -> com.bluefox.f:
    com.bluefox.Speex speexDecoder -> a
    byte[] totData -> b
    android.media.AudioTrack track -> c
com.bluefox.SpeexRecorderEncoder -> com.bluefox.g:
    java.lang.Object mutex -> b
    com.bluefox.Speex speex -> c
    int encoder_packagesize -> a
    byte[] processedData -> d
    int totSize -> e
    byte[] myProcessedData -> f
    int totRawSize -> g
    short[] myRawData -> h
    com.bluefox.WifiSound mainIns -> i
    java.util.List list -> j
    boolean isRecording -> k
    java.lang.String fileName -> l
    void run() -> run
    void putData(short[],int) -> a
    void setRecording(boolean) -> a
    boolean isRecording() -> a
com.bluefox.SpeexRecorderEncoder$ReadData -> com.bluefox.h:
    int size -> a
    short[] ready -> b
com.bluefox.SpeexRecorderRecorder -> com.bluefox.i:
    boolean isRecording -> a
    java.lang.Object mutex -> b
    int packagesize -> c
    java.lang.String fileName -> d
    com.bluefox.WifiSound mainIns -> e
    void run() -> run
    void setRecording(boolean) -> a
com.bluefox.SpeexTesttActivity -> com.bluefox.SpeexTesttActivity:
    android.widget.Button startButton -> a
    android.widget.Button stopButton -> b
    android.widget.Button playButton -> c
    android.widget.Button exitButon -> d
    android.widget.TextView textView -> e
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.content.DialogInterface,int) -> onClick
com.sinpo.xnfc.NFCard -> com.sinpo.xnfc.NFCard:
    android.nfc.NfcAdapter nfcAdapter -> a
    android.app.PendingIntent pendingIntent -> b
    android.content.res.Resources res -> c
    android.widget.TextView board -> d
    long firstTime -> e
    android.graphics.drawable.Drawable spliter -> f
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onPause() -> onPause
    void onResume() -> onResume
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void refreshStatus() -> a
    void showData(java.lang.String) -> a
    void showHelp(int) -> a
    void showHint() -> b
    void handleTag(boolean,java.lang.String,android.text.Editable,org.xml.sax.XMLReader) -> handleTag
    android.graphics.drawable.Drawable getDrawable(java.lang.String) -> getDrawable
com.sinpo.xnfc.NFCard$ContentType -> com.sinpo.xnfc.a:
    com.sinpo.xnfc.NFCard$ContentType HINT -> a
    com.sinpo.xnfc.NFCard$ContentType DATA -> b
    com.sinpo.xnfc.NFCard$ContentType MSG -> c
com.sinpo.xnfc.Util -> com.sinpo.xnfc.b:
    char[] HEX -> a
    int toInt(byte[],int,int) -> a
    int toIntR$1cf967b1(byte[],int) -> a
    java.lang.String toHexString(byte[],int,int) -> b
    java.lang.String toHexStringR$55a39fc4(byte[],int) -> b
    int parseInt$44bd8e92(java.lang.String) -> a
    java.lang.String toAmountString(float) -> a
com.sinpo.xnfc.card.CardManager -> com.sinpo.xnfc.a.a:
    java.lang.String[][] TECHLISTS -> a
    android.content.IntentFilter[] FILTERS -> b
    java.lang.String buildResult(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String load(android.os.Parcelable,android.content.res.Resources) -> a
com.sinpo.xnfc.card.pboc.BeijingMunicipal -> com.sinpo.xnfc.a.a.a:
    com.sinpo.xnfc.card.pboc.BeijingMunicipal load(com.sinpo.xnfc.tech.Iso7816$Tag,android.content.res.Resources) -> a
    com.sinpo.xnfc.card.pboc.BeijingMunicipal load$4871312a(com.sinpo.xnfc.tech.Iso7816$Tag,android.content.res.Resources) -> b
    byte[] selectAID(com.sinpo.xnfc.tech.Iso7816$Tag,byte[]) -> a
    java.util.ArrayList findAIDs(com.sinpo.xnfc.tech.Iso7816$Tag) -> b
    com.sinpo.xnfc.tech.Iso7816$Response getBalance(com.sinpo.xnfc.tech.Iso7816$Tag) -> c
com.sinpo.xnfc.card.pboc.ChanganTong -> com.sinpo.xnfc.a.a.b:
    byte[] DFN_SRV -> j
    com.sinpo.xnfc.card.pboc.ChanganTong load(com.sinpo.xnfc.tech.Iso7816$Tag,android.content.res.Resources) -> a
com.sinpo.xnfc.card.pboc.PbocCard -> com.sinpo.xnfc.a.a.c:
    byte[] DFI_MF -> a
    byte[] DFI_EP -> b
    byte[] DFN_PSE -> c
    byte[] DFN_PXX -> d
    java.lang.String name -> e
    java.lang.String serl -> f
    java.lang.String version -> g
    java.lang.String date -> h
    java.lang.String count -> i
    java.lang.String cash -> j
    java.lang.String log -> k
    java.lang.String load(android.nfc.tech.IsoDep,android.content.res.Resources) -> a
    void parseInfo(com.sinpo.xnfc.tech.Iso7816$Response,int,boolean) -> a
    boolean addLog(com.sinpo.xnfc.tech.Iso7816$Response,java.util.ArrayList) -> a
    java.util.ArrayList readLog$255b338f(com.sinpo.xnfc.tech.Iso7816$Tag) -> a
    void parseLog(java.util.ArrayList[]) -> a
    void parseBalance(com.sinpo.xnfc.tech.Iso7816$Response) -> a
com.sinpo.xnfc.card.pboc.ShenzhenTong -> com.sinpo.xnfc.a.a.d:
    byte[] DFN_SRV -> j
    com.sinpo.xnfc.card.pboc.ShenzhenTong load(com.sinpo.xnfc.tech.Iso7816$Tag,android.content.res.Resources) -> a
com.sinpo.xnfc.card.pboc.WuhanTong -> com.sinpo.xnfc.a.a.e:
    byte[] DFN_SRV -> j
    com.sinpo.xnfc.card.pboc.WuhanTong load(com.sinpo.xnfc.tech.Iso7816$Tag,android.content.res.Resources) -> a
com.sinpo.xnfc.card.pboc.YangchengTong -> com.sinpo.xnfc.a.a.f:
    byte[] DFN_SRV -> j
    byte[] DFN_SRV_S1 -> k
    byte[] DFN_SRV_S2 -> l
    com.sinpo.xnfc.card.pboc.YangchengTong load(com.sinpo.xnfc.tech.Iso7816$Tag,android.content.res.Resources) -> a
com.sinpo.xnfc.tech.FeliCa -> com.sinpo.xnfc.b.a:
    byte[] EMPTY -> a
    byte[] data -> b
    byte[] getBytes() -> a
    java.lang.String toString() -> toString
com.sinpo.xnfc.tech.FeliCa$Command -> com.sinpo.xnfc.b.b:
    int length -> c
    com.sinpo.xnfc.tech.FeliCa$IDm idm -> d
    byte[] getBytes() -> a
com.sinpo.xnfc.tech.FeliCa$IDm -> com.sinpo.xnfc.b.c:
    byte[] EMPTY -> c
com.sinpo.xnfc.tech.FeliCa$PMm -> com.sinpo.xnfc.b.d:
    byte[] EMPTY -> c
com.sinpo.xnfc.tech.FeliCa$ReadResponse -> com.sinpo.xnfc.b.e:
    byte[] EMPTY -> c
    byte[] blockData -> d
    byte[] getBlockData() -> b
    boolean isOkey() -> c
com.sinpo.xnfc.tech.FeliCa$Response -> com.sinpo.xnfc.b.f:
    int toInt(byte[]) -> a
com.sinpo.xnfc.tech.FeliCa$ServiceCode -> com.sinpo.xnfc.b.g:
    byte[] EMPTY -> c
com.sinpo.xnfc.tech.FeliCa$Tag -> com.sinpo.xnfc.b.h:
    android.nfc.tech.NfcF nfcTag -> a
    int sys -> b
    com.sinpo.xnfc.tech.FeliCa$IDm idm -> c
    com.sinpo.xnfc.tech.FeliCa$PMm pmm -> d
    java.lang.String toString() -> toString
    byte[] transceive(com.sinpo.xnfc.tech.FeliCa$Command) -> a
com.sinpo.xnfc.tech.Iso7816 -> com.sinpo.xnfc.b.i:
    byte[] EMPTY -> b
    byte[] data -> a
    boolean match(byte[],int) -> a
    boolean match(byte) -> a
    int size() -> a
    byte[] getBytes() -> b
    java.lang.String toString() -> toString
com.sinpo.xnfc.tech.Iso7816$BerL -> com.sinpo.xnfc.b.j:
    int val -> b
    int test(byte[],int) -> b
    int calc(byte[],int) -> c
com.sinpo.xnfc.tech.Iso7816$BerT -> com.sinpo.xnfc.b.k:
    com.sinpo.xnfc.tech.Iso7816$BerT CLASS_DFN -> b
    com.sinpo.xnfc.tech.Iso7816$BerT CLASS_ADO -> c
    com.sinpo.xnfc.tech.Iso7816$BerT CLASS_AID -> d
    int test(byte[],int) -> b
    com.sinpo.xnfc.tech.Iso7816$BerT read(byte[],int) -> c
    boolean hasChild() -> c
com.sinpo.xnfc.tech.Iso7816$BerTLV -> com.sinpo.xnfc.b.l:
    com.sinpo.xnfc.tech.Iso7816$BerT t -> b
    com.sinpo.xnfc.tech.Iso7816$BerV v -> c
    com.sinpo.xnfc.tech.Iso7816$BerTLV read(com.sinpo.xnfc.tech.Iso7816) -> a
    com.sinpo.xnfc.tech.Iso7816$BerTLV read(byte[],int) -> b
    com.sinpo.xnfc.tech.Iso7816$BerTLV getChildByTag(com.sinpo.xnfc.tech.Iso7816$BerT) -> a
com.sinpo.xnfc.tech.Iso7816$BerV -> com.sinpo.xnfc.b.m:
com.sinpo.xnfc.tech.Iso7816$ID -> com.sinpo.xnfc.b.n:
com.sinpo.xnfc.tech.Iso7816$Response -> com.sinpo.xnfc.b.o:
    byte[] EMPTY -> c
    byte[] ERROR -> b
    boolean isOkey() -> c
    int size() -> a
    byte[] getBytes() -> b
com.sinpo.xnfc.tech.Iso7816$Tag -> com.sinpo.xnfc.b.p:
    android.nfc.tech.IsoDep nfcTag -> a
    com.sinpo.xnfc.tech.Iso7816$ID id -> b
    com.sinpo.xnfc.tech.Iso7816$Response getBalance(boolean) -> a
    com.sinpo.xnfc.tech.Iso7816$Response readRecord(int,int) -> a
    com.sinpo.xnfc.tech.Iso7816$Response readBinary(int) -> a
    com.sinpo.xnfc.tech.Iso7816$Response selectByID(byte[]) -> a
    com.sinpo.xnfc.tech.Iso7816$Response selectByName(byte[]) -> b
    byte[] transceive(byte[]) -> c
